@startuml updateTruckSD

autonumber
!pragma teoz true

skinparam sequence {
ParticipantBorderColor black
ParticipantBackgroundColor white
}

actor "Fleet Manager" as manager

participant Google as Google <<System(C4)>>
box "<<System(C4)>>\n       System" #LightYellow
    box "<<Container(C4)>>\n           UI" #LightCyan
        
        participant LoginController as LoginC <<Component(C4)>>
        participant LoginService as LoginS <<Component(C4)>>
    
    
    
        participant TruckComponent as TruckC <<Component(C4)>>
        participant TruckS as TruckS <<Component(C4)>>
        

    end box

    box "<<Container(C4)>>\nTruckCTRLentication" #LightSkyBlue

        participant UserController as UserCTRL <<Container(C4)>> 
        participant UserService as UserServ <<Container(C4)>> 
        participant UserRepository as UserRepo <<Container(C4)>> 

        participant TruckController as TruckCTRL <<Container(C4)>>

    end box
    box "<<Container(C4)>>\n       Logistics" #LightBlue
        participant TruckRoute as Route <<Component(C4)>>
        participant TruckController as Controller <<Component(C4)>>
        participant TruckS as Service <<Component(C4)>>
        participant TruckRepository as Repository <<Component(C4)>>
        participant Persistence as Persistence <<Component(C4)>>
    end box

end box


activate manager
manager->LoginC: I want to login
activate LoginC

alt Login through email and password in EletricGo


    LoginC -> LoginS: login(email, password)
    activate LoginS
    LoginS -> UserCTRL: POST Login(email, password)
    activate UserCTRL

    UserCTRL -> UserServ: login(email, password)
    activate UserServ
    UserServ -> UserRepo: findByEmail(email)
    activate UserRepo
    UserRepo --> UserServ: User
    deactivate UserRepo
    UserServ -> UserServ: checkPassword(password, User)
    UserServ --> UserCTRL: Success
    deactivate UserServ


    UserCTRL --> LoginS: 200 OK + Cookie
    deactivate UserCTRL

    LoginS --> LoginC: 200 OK
    deactivate LoginS

else Login through Google

    LoginC -> Google: Login with Google account
    activate Google
    Google --> LoginC: 200 OK
    deactivate Google
    LoginC -> LoginS: loginWithGoogle()
    activate LoginS
    LoginS -> UserCTRL: POST LoginWithGoogle()
    activate UserCTRL
    UserCTRL -> UserServ: userExists()
    activate UserServ
    UserServ -> UserRepo: findByEmail(email)
    activate UserRepo
    UserRepo --> UserServ: User
    deactivate UserRepo
    UserServ --> UserCTRL: User
    deactivate UserServ
    UserCTRL --> LoginS: 200 OK + Cookie
    deactivate UserCTRL
    LoginS --> LoginC: 200 OK
    deactivate LoginS

    deactivate Google

end



LoginC --> manager: informs about the success of login
deactivate LoginC
activate TruckC
manager -> TruckC: Asks to update a Truck

TruckC -> manager: Asks for Truck ID


manager ->TruckC: Inserts Truck ID

TruckC -> manager: Asks for new Truck Info
manager -> TruckC: Inserts new Truck Info
TruckC -> TruckS: updateTruck(Truck)
activate TruckS
TruckS -> TruckCTRL: PATCH updateTruck(truck)

activate TruckCTRL

TruckCTRL -> Route: PATCH updateTruck(truck)
activate Route
Route -> Controller: PATCH updateTruck(truck)
activate Controller

alt Truck exists 

    Controller -> Service: updateTruck(truck)
    activate Service

    Service -> Repository: getTruckById(truckInfo.id)
    activate Repository

    Repository -> Persistence: findOne(truckInfo.id)
    activate Persistence
    Persistence -> Repository: truck
    Repository->Service: truck

    Service -> Repository: update(truckInfo)
    Repository -> Persistence:save(truckInfo)

    Repository -> Persistence:true
    Repository-> Service: truckInfo
    Service-> Controller: truckInfo

    Controller->Route: 200 OK + truckInfo
    Route ->TruckCTRL: 200 OK + truckInfo
    TruckCTRL -> TruckS: 200 OK + truckInfo
    TruckS -> TruckC: 200 OK + truckInfo
    TruckC -> manager: informs Truck updated
else Truck doesn't exists

    Controller -> Service: updateTruck(truck)
    Service -> Repository: getTruckById(truckInfo.id)
    Repository->Persistence: findOne(truckInfo.id)
    Persistence ->Repository: null
    deactivate Persistence
    Repository->Service: null
    deactivate Repository
    Service->Controller: error, truck doesn't exist
    deactivate Service
    Controller-> Route: 404 NOT FOUND, Truck doesn't exist
    deactivate Controller
    Route ->TruckCTRL: 404 NOT FOUND, Truck doesn't exist
    deactivate Route
    TruckCTRL->TruckS: 404 NOT FOUND, Truck doesn't exist
    deactivate TruckCTRL
    TruckS -> TruckC: 404 NOT FOUND, Truck doesn't exist
    deactivate TruckS
    TruckC->manager: informs about update failure
    deactivate TruckC
    deactivate manager

end
@enduml