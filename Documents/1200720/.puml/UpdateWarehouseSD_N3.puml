@startuml 
autonumber

actor "Warehouse Manager" as admin
box "<<Container(C4)>>\n       UI" #LightYellow
participant CreateWarehouseComponent as uiComponent <<Container(C4)>>
participant CreateWarehouseService as uiService <<Container(C4)>>
box "<<Container(C4)>>\n       Auth" #LightBlue
participant WarehouseController as authController <<Container(C4)>>
box "<<Container(C4)>>\n    Warehouse Management" #LightGreen
participant WarehouseRoute as  WM <<Component(C4)>>
participant WarehouseController as  CTL <<Component(C4)>>
participant WarehouseService as  SV <<Component(C4)>>
participant "warehouse : Warehouse" as  W <<Component(C4)>>
participant "warehouseDto : WarehouseDTO" as  DTO <<Component(C4)>>
participant WarehouseRepository as  WR <<Component(C4)>>
end box

end box

admin -> uiComponent: I want to update the details of a warehouse
activate uiComponent

uiComponent --> admin: asks for the ID of the warehouse
deactivate uiComponent

admin -> uiComponent: inserts the ID of the warehouse
activate uiComponent

uiComponent --> admin: asks for the information to update
deactivate uiComponent

admin -> uiComponent: inserts the information to update
activate uiComponent

uiComponent -> uiService : updateWarehouse(warehouseDto)
activate uiService
uiService -> authController : PUT editWarehouse(warehouseDto)
activate authController
authController -> WM : PUT Update()
activate WM 
WM -> CTL : Update()
activate CTL
CTL -> SV : UpdateWarehouse(warehouseDto)
deactivate CTL
deactivate WM
deactivate authController
deactivate uiService
alt If the Id entered matches the Id of a warehouse\n  in the system and the business rules for the\n  new attributes are respected
activate SV
SV -> WR : GetById(warehouseDto.Id)

activate WR


WR --> SV : warehouse 
deactivate WR

SV -> W : Update(warehouseDto)
activate W

deactivate W

SV -> W : toWarehouseDto()
activate W

W --> SV : warehouseDto
deactivate W 
SV --> CTL : warehouseDto
activate CTL
deactivate SV

CTL --> WM : warehouseDto
deactivate CTL
activate WM



WM --> authController : 200 OK 
deactivate WM
activate authController
authController --> uiService : 200 OK 
deactivate authController
activate uiService
uiService --> uiComponent : 200 OK 
deactivate uiService


uiComponent --> admin: displays the updated information and \ninforms about the operation success
deactivate uiComponent

else If the Id entered does not match the Id of a warehouse in the system


activate SV

SV -> WR : GetById(warehouseDto.Id)
activate WR

WR --> SV : null 
deactivate WR


SV --> CTL : null
activate CTL

deactivate SV

CTL --> WM : null
deactivate CTL
activate WM
WM --> authController : 409 CONFLICT 
deactivate WM
activate authController
authController --> uiService : 409 CONFLICT 
deactivate authController
activate uiService
uiService --> uiComponent : 409 CONFLICT 
activate uiComponent
deactivate uiService

deactivate WM


uiComponent --> admin : display a message error
deactivate uiComponent

else  If the business rules for the new attributes are not respected

activate SV

SV -> WR : GetById(warehouseDto.Id)
activate WR

WR --> SV : warehouse 
deactivate WR

SV -> W : Update(warehouseDto)
activate W

W --> SV : BusinessRuleValidationException
deactivate W 
SV --> CTL : InvalidOperationException

activate CTL
deactivate SV

CTL --> WM : InvalidOperationException
deactivate CTL 
activate WM
WM --> authController : 409 CONFLICT 
deactivate WM
activate authController
authController --> uiService : 409 CONFLICT 
deactivate authController
activate uiService
uiService --> uiComponent : 409 CONFLICT 
activate uiComponent
deactivate uiService
uiComponent --> admin : display a message error
deactivate uiComponent
end 


deactivate uiComponent
deactivate admin

@enduml
